#!/usr/bin/env python3
"""
Script de verificaci√≥n del sistema PDF Copilot
Ejecutar para validar que todas las dependencias est√°n instaladas correctamente
"""
import sys
import os
from pathlib import Path


def verificar_python():
    """Verificar versi√≥n de Python"""
    version = sys.version_info
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    if version < (3, 11):
        print("‚ùå Se requiere Python 3.11 o superior")
        return False
    return True


def verificar_dependencias():
    """Verificar dependencias principales"""
    dependencias = [
        ("PyPDF2", "Procesamiento de PDFs"),
        ("pdfplumber", "Extracci√≥n avanzada de PDFs"),
        ("chromadb", "Vector store"),
        ("langchain", "Framework LLM"),
        ("sentence_transformers", "Embeddings"),
        ("streamlit", "Interfaz web"),
        ("fastapi", "API REST"),
        ("uvicorn", "Servidor ASGI"),
        ("openai", "Cliente OpenAI"),
        ("requests", "Cliente HTTP"),
    ]

    print("\nüì¶ Verificando dependencias:")
    fallos = 0

    for dep, descripcion in dependencias:
        try:
            __import__(dep)
            print(f"‚úÖ {dep:<20} - {descripcion}")
        except ImportError:
            print(f"‚ùå {dep:<20} - {descripcion} (NO INSTALADO)")
            fallos += 1

    return fallos == 0


def verificar_modulos_sistema():
    """Verificar m√≥dulos del sistema"""
    print("\nüîß Verificando m√≥dulos del sistema:")

    # A√±adir src al path
    sys.path.insert(0, str(Path(__file__).parent / "src"))

    modulos = [
        ("core.config", "Configuraci√≥n"),
        ("core.pdf_processor", "Procesador PDF"),
        ("core.vectorstore", "Vector Store"),
        ("core.llm_manager", "Gestor LLM"),
        ("core.orchestrator", "Orquestador"),
    ]

    fallos = 0
    for modulo, descripcion in modulos:
        try:
            __import__(modulo)
            print(f"‚úÖ {modulo:<25} - {descripcion}")
        except ImportError as e:
            print(f"‚ùå {modulo:<25} - {descripcion} ({str(e)})")
            fallos += 1

    return fallos == 0


def verificar_estructura():
    """Verificar estructura de directorios"""
    print("\nüìÅ Verificando estructura:")

    directorios = [
        "src/core",
        "src/agents",
        "src/ui",
        "src/api",
        "data",
        "tests",
        "docker",
    ]

    fallos = 0
    for directorio in directorios:
        path = Path(directorio)
        if path.exists():
            print(f"‚úÖ {directorio}")
        else:
            print(f"‚ùå {directorio} (NO EXISTE)")
            fallos += 1

    return fallos == 0


def verificar_archivos_config():
    """Verificar archivos de configuraci√≥n"""
    print("\n‚öôÔ∏è  Verificando configuraci√≥n:")

    archivos = [
        ("requirements.txt", "Dependencias"),
        (".env.example", "Ejemplo de configuraci√≥n"),
        ("docker-compose.yml", "Configuraci√≥n Docker"),
        ("README.md", "Documentaci√≥n"),
        ("INSTALL.md", "Gu√≠a de instalaci√≥n"),
    ]

    fallos = 0
    for archivo, descripcion in archivos:
        path = Path(archivo)
        if path.exists():
            print(f"‚úÖ {archivo:<20} - {descripcion}")
        else:
            print(f"‚ùå {archivo:<20} - {descripcion} (NO EXISTE)")
            fallos += 1

    return fallos == 0


def verificar_llm_providers():
    """Verificar proveedores LLM disponibles"""
    print("\nü§ñ Verificando proveedores LLM:")

    try:
        from core.llm_manager import llm_manager

        status = llm_manager.get_provider_status()

        print(f"Proveedor activo: {status['active_provider']}")
        print("Proveedores disponibles:")

        for provider, disponible in status["provider_status"].items():
            estado = "‚úÖ" if disponible else "‚ùå"
            print(f"  {estado} {provider}")

        return len(status["available_providers"]) > 0

    except Exception as e:
        print(f"‚ùå Error verificando LLM: {e}")
        return False


def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üéØ VERIFICACI√ìN DEL SISTEMA PDF COPILOT")
    print("=" * 50)

    verificaciones = [
        ("Versi√≥n de Python", verificar_python),
        ("Dependencias", verificar_dependencias),
        ("Estructura de directorios", verificar_estructura),
        ("Archivos de configuraci√≥n", verificar_archivos_config),
        ("M√≥dulos del sistema", verificar_modulos_sistema),
        ("Proveedores LLM", verificar_llm_providers),
    ]

    exitos = 0
    total = len(verificaciones)

    for nombre, verificacion in verificaciones:
        try:
            if verificacion():
                exitos += 1
        except Exception as e:
            print(f"‚ùå Error en {nombre}: {e}")

    print("\n" + "=" * 50)
    print(f"üìä RESUMEN: {exitos}/{total} verificaciones exitosas")

    if exitos == total:
        print("üéâ ¬°Sistema completamente funcional!")
        print("\nüöÄ Para ejecutar la aplicaci√≥n:")
        print("   streamlit run src/ui/streamlit_app.py")
        print("   Luego navegar a: http://localhost:8501")
        return True
    else:
        print("‚ö†Ô∏è  Hay problemas que resolver antes de usar el sistema")
        print("üí° Revisa las gu√≠as en INSTALL.md y README.md")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
