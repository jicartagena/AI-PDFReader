"""
Agente especializado en comparaci√≥n de documentos
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from collections import defaultdict

from ..core.llm_manager import llm_manager

logger = logging.getLogger(__name__)


class DocumentComparator:
    """Agente para comparar documentos y encontrar similitudes/diferencias"""

    def __init__(self):
        self.comparison_templates = {
            "general": "comparaci√≥n general",
            "methodology": "metodolog√≠as utilizadas",
            "conclusions": "conclusiones y resultados",
            "data": "datos y estad√≠sticas",
            "recommendations": "recomendaciones",
            "timeline": "cronolog√≠as y fechas",
            "costs": "costos y presupuestos",
            "technical": "aspectos t√©cnicos",
        }

    async def compare_documents(
        self, documents: Dict[str, List[str]], focus_aspect: str = ""
    ) -> str:
        """Comparar m√∫ltiples documentos"""

        if len(documents) < 2:
            return "Se necesitan al menos 2 documentos para hacer una comparaci√≥n."

        # Preparar contenido de documentos
        doc_contents = {}
        for filename, chunks in documents.items():
            doc_contents[filename] = " ".join(chunks)

        # Detectar tipo de comparaci√≥n
        comparison_type = self._detect_comparison_type(focus_aspect)

        # Generar comparaci√≥n seg√∫n el tipo
        if len(documents) == 2:
            return await self._compare_two_documents(
                doc_contents, comparison_type, focus_aspect
            )
        else:
            return await self._compare_multiple_documents(
                doc_contents, comparison_type, focus_aspect
            )

    def _detect_comparison_type(self, focus_aspect: str) -> str:
        """Detectar el tipo de comparaci√≥n basado en la consulta"""

        focus_lower = focus_aspect.lower()

        for comp_type, keywords in {
            "methodology": ["metodolog√≠a", "m√©todo", "enfoque", "approach"],
            "conclusions": ["conclusi√≥n", "resultado", "finding", "outcome"],
            "data": ["datos", "estad√≠sticas", "n√∫meros", "data", "statistics"],
            "recommendations": ["recomendaci√≥n", "sugerencia", "recommendation"],
            "timeline": ["tiempo", "fecha", "cronolog√≠a", "timeline"],
            "costs": ["costo", "precio", "presupuesto", "cost", "budget"],
            "technical": ["t√©cnico", "technology", "implementaci√≥n"],
        }.items():
            if any(keyword in focus_lower for keyword in keywords):
                return comp_type

        return "general"

    async def _compare_two_documents(
        self, documents: Dict[str, str], comparison_type: str, focus_aspect: str
    ) -> str:
        """Comparar exactamente dos documentos"""

        doc_names = list(documents.keys())
        doc1_name, doc2_name = doc_names[0], doc_names[1]
        doc1_content, doc2_content = documents[doc1_name], documents[doc2_name]

        focus_instruction = (
            f"enfoc√°ndote espec√≠ficamente en {focus_aspect}" if focus_aspect else ""
        )

        prompt = f"""
        Realiza una comparaci√≥n detallada entre los siguientes dos documentos {focus_instruction}:
        
        **DOCUMENTO A: {doc1_name}**
        {doc1_content}
        
        **DOCUMENTO B: {doc2_name}**
        {doc2_content}
        
        Estructura tu comparaci√≥n de la siguiente manera:
        
        ## üìã RESUMEN EJECUTIVO
        - Breve descripci√≥n de cada documento
        - Prop√≥sito principal de cada uno
        
        ## üîç SIMILITUDES CLAVE
        - Temas o conceptos compartidos
        - Enfoques similares
        - Datos o conclusiones coincidentes
        
        ## ‚ö° DIFERENCIAS PRINCIPALES
        - Enfoques distintos
        - Datos contradictorios
        - Perspectivas diferentes
        
        ## üìä AN√ÅLISIS COMPARATIVO
        - Fortalezas y debilidades de cada documento
        - Complementariedad entre ambos
        
        ## üí° CONCLUSIONES
        - S√≠ntesis de los hallazgos
        - Recomendaciones basadas en la comparaci√≥n
        
        Mant√©n un tono objetivo y anal√≠tico.
        """

        return llm_manager.generate_response(prompt)

    async def _compare_multiple_documents(
        self, documents: Dict[str, str], comparison_type: str, focus_aspect: str
    ) -> str:
        """Comparar m√∫ltiples documentos (3 o m√°s)"""

        doc_summaries = []
        for name, content in documents.items():
            # Crear resumen breve de cada documento
            summary = content[:500] + "..." if len(content) > 500 else content
            doc_summaries.append(f"**{name}**: {summary}")

        focus_instruction = f"enfoc√°ndote en {focus_aspect}" if focus_aspect else ""

        prompt = f"""
        Realiza una comparaci√≥n sistem√°tica de los siguientes {len(documents)} documentos {focus_instruction}:
        
        {chr(10).join(doc_summaries)}
        
        Estructura tu an√°lisis comparativo de la siguiente manera:
        
        ## üìë MATRIZ COMPARATIVA
        Crea una comparaci√≥n estructurada documento por documento:
        
        ## üîó PATRONES COMUNES
        - Temas que aparecen en m√∫ltiples documentos
        - Enfoques compartidos
        - Datos o conclusiones consistentes
        
        ## üåü ELEMENTOS √öNICOS
        - Aspectos exclusivos de cada documento
        - Aportes distintivos
        - Perspectivas originales
        
        ## üìà AN√ÅLISIS DE CONSISTENCIA
        - Nivel de alineaci√≥n entre documentos
        - Contradicciones o discrepancias
        - Grado de complementariedad
        
        ## üéØ S√çNTESIS FINAL
        - Panorama general consolidado
        - Recomendaciones para usar conjunto de documentos
        
        Mant√©n objetividad y proporciona an√°lisis equilibrado.
        """

        return llm_manager.generate_response(prompt)

    async def compare_specific_aspects(
        self, documents: Dict[str, str], aspects: List[str]
    ) -> Dict[str, str]:
        """Comparar aspectos espec√≠ficos entre documentos"""

        comparisons = {}

        for aspect in aspects:
            prompt = f"""
            Compara el siguiente aspecto espec√≠fico entre los documentos: **{aspect}**
            
            DOCUMENTOS:
            {chr(10).join([f"**{name}**: {content[:400]}..." for name, content in documents.items()])}
            
            Instrucciones:
            - Enf√≥cate √∫nicamente en: {aspect}
            - Identifica c√≥mo cada documento aborda este aspecto
            - Se√±ala similitudes y diferencias
            - M√°ximo 150 palabras
            
            Comparaci√≥n de {aspect}:
            """

            comparison = llm_manager.generate_response(prompt)
            comparisons[aspect] = comparison

        return comparisons

    async def generate_compatibility_analysis(self, documents: Dict[str, str]) -> str:
        """Analizar compatibilidad y complementariedad entre documentos"""

        prompt = f"""
        Analiza la compatibilidad y potencial de integraci√≥n entre los siguientes documentos:
        
        {chr(10).join([f"**{name}**: {content[:300]}..." for name, content in documents.items()])}
        
        Proporciona un an√°lisis de:
        
        ## ü§ù COMPATIBILIDAD
        - Grado de alineaci√≥n entre documentos
        - Conflictos o contradicciones identificadas
        - Nivel de coherencia conceptual
        
        ## üîÑ COMPLEMENTARIEDAD
        - C√≥mo se complementan los documentos
        - Vac√≠os que cada uno llena respecto a los otros
        - Valor agregado del conjunto
        
        ## üìã ESTRATEGIA DE INTEGRACI√ìN
        - Recomendaciones para usar documentos conjuntamente
        - Orden de prioridad o lectura sugerido
        - Advertencias sobre posibles conflictos
        
        An√°lisis de compatibilidad:
        """

        return llm_manager.generate_response(prompt)

    async def find_contradictions(self, documents: Dict[str, str]) -> str:
        """Encontrar contradicciones entre documentos"""

        prompt = f"""
        Identifica contradicciones, inconsistencias o conflictos entre los siguientes documentos:
        
        {chr(10).join([f"**{name}**: {content[:400]}..." for name, content in documents.items()])}
        
        Estructura tu an√°lisis as√≠:
        
        ## ‚ö†Ô∏è CONTRADICCIONES IDENTIFICADAS
        - Lista espec√≠fica de conflictos encontrados
        - Documentos involucrados en cada contradicci√≥n
        
        ## üìä DATOS CONFLICTIVOS
        - N√∫meros, fechas o estad√≠sticas que no coinciden
        - Metodolog√≠as que se contradicen
        
        ## ü§î PERSPECTIVAS DIVERGENTES
        - Diferentes puntos de vista sobre el mismo tema
        - Conclusiones opuestas
        
        ## üí° RECOMENDACIONES
        - C√≥mo resolver o manejar las contradicciones
        - Investigaci√≥n adicional necesaria
        
        Si no hay contradicciones significativas, ind√≠calo claramente.
        """

        return llm_manager.generate_response(prompt)

    async def generate_evolution_analysis(self, documents: Dict[str, str]) -> str:
        """Analizar evoluci√≥n o progresi√≥n entre documentos (si tienen orden temporal)"""

        prompt = f"""
        Analiza la evoluci√≥n, progresi√≥n o desarrollo tem√°tico entre los siguientes documentos:
        
        {chr(10).join([f"**{name}**: {content[:300]}..." for name, content in documents.items()])}
        
        Estructura el an√°lisis evolutivo:
        
        ## üìà PROGRESI√ìN IDENTIFICADA
        - Evoluci√≥n de conceptos o ideas
        - Desarrollo de metodolog√≠as
        - Cambios en enfoques o perspectivas
        
        ## üîÑ CONTINUIDAD Y CAMBIOS
        - Elementos que se mantienen constantes
        - Aspectos que han evolucionado
        - Nuevas incorporaciones
        
        ## üéØ TENDENCIAS OBSERVADAS
        - Direcci√≥n del cambio
        - Patrones de desarrollo
        - Maduraci√≥n de ideas
        
        ## üîÆ IMPLICACIONES
        - Significado de la evoluci√≥n observada
        - Proyecciones futuras basadas en la progresi√≥n
        
        An√°lisis evolutivo:
        """

        return llm_manager.generate_response(prompt)

    def get_comparison_metrics(self, documents: Dict[str, str]) -> Dict[str, Any]:
        """Obtener m√©tricas cuantitativas de la comparaci√≥n"""

        doc_lengths = {name: len(content) for name, content in documents.items()}
        doc_word_counts = {
            name: len(content.split()) for name, content in documents.items()
        }

        return {
            "total_documents": len(documents),
            "document_names": list(documents.keys()),
            "character_counts": doc_lengths,
            "word_counts": doc_word_counts,
            "average_length": sum(doc_lengths.values()) / len(doc_lengths),
            "length_variance": self._calculate_length_variance(
                list(doc_lengths.values())
            ),
            "size_similarity": self._calculate_size_similarity(
                list(doc_lengths.values())
            ),
        }

    def _calculate_length_variance(self, lengths: List[int]) -> float:
        """Calcular varianza de longitudes"""
        if len(lengths) < 2:
            return 0

        mean = sum(lengths) / len(lengths)
        variance = sum((x - mean) ** 2 for x in lengths) / len(lengths)
        return variance

    def _calculate_size_similarity(self, lengths: List[int]) -> float:
        """Calcular similitud de tama√±os (0-1, siendo 1 muy similares)"""
        if len(lengths) < 2:
            return 1.0

        max_len = max(lengths)
        min_len = min(lengths)

        if max_len == 0:
            return 1.0

        return min_len / max_len
